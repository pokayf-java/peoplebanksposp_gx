<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://cxf.apache.org/jaxws
    http://cxf.apache.org/schemas/jaxws.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
	<!-- <import resource="classpath:META-INF/cxf/cxf-extension-xml.xml" /> -->
	
	<!-- <import resource="classpath:META-INF/cxf/cxf-extension-http.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" /> -->


	<!-- 引入properties文件 -->
	<context:property-placeholder location="classpath:/DBConfig.properties" />

	<!-- 定义数据库连接池数据源bean destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 设置JDBC驱动名称 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<!-- 设置JDBC连接URL -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 设置数据库用户名 -->
		<property name="user" value="${jdbc.username}" />
		<!-- 设置数据库密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 设置连接池初始值
		<property name="initialPoolSize" value="5" /> -->
	</bean>

	<!-- 配置sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />

		<!-- hibernate的相关属性配置 -->
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
				hibernate.dialect=org.hibernate.dialect.DB2Dialect
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				hibernate.hbm2ddl.auto=update
				<!-- 是否在控制台显示sql -->
				hibernate.show_sql=true
				<!-- 是否格式化sql，优化显示 -->
				hibernate.format_sql=true
				<!-- 是否开启二级缓存 -->
				hibernate.cache.use_second_level_cache=false
				<!-- 是否开启查询缓存 -->
				hibernate.cache.use_query_cache=false
				<!-- 数据库批量查询最大数 -->
				hibernate.jdbc.fetch_size=50
				<!-- 数据库批量更新、添加、删除操作最大数 -->
				hibernate.jdbc.batch_size=50
				<!-- 是否自动提交事务 -->
				hibernate.connection.autocommit=true
				<!-- 指定hibernate在何时释放JDBC连接 -->
				hibernate.connection.release_mode=auto
				<!-- 创建session方式 hibernate4.x 的方式 -->
				hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext
				<!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
					所以把它设置为none即可 -->
				javax.persistence.validation.mode=none

				hibernate.default_schema=${jdbc.username}

				<!-- hibernate.current_session_context_class=thread -->
			</value>
		</property>
		<!-- 自动扫描实体对象 tdxy.bean的包结构中存放实体类 -->
		<property name="packagesToScan" value="com.poka.app.anno.enity" />
	</bean>

	<!-- 定义事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<!-- 定义 Autowired 自动注入 bean -->
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<!-- 扫描有注解的文件 base-package 包路径 -->
	<context:component-scan base-package="com.poka.app.anno" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务执行方式 REQUIRED：指定当前方法必需在事务环境中运行， 如果当前有事务环境就加入当前正在执行的事务环境， 如果当前没有事务，就新建一个事务。 
				这是默认值。 -->
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="import*" propagation="REQUIRED" />
			<tx:method name="batch*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<!-- 指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。 查询定义即可 
				read-only="true" 表示只读 -->
			<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 定义切面，在* com.poka.app.cb.anno.*.service.*ServiceImpl.*(..)) 中执行有关的hibernate 
		session的事务操作 -->
	<aop:config>
		<aop:pointcut id="serviceOperation"
			expression="execution(* com.poka.app.anno.base.service.impl.*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>

	<!-- 配置任务调度 -->


	<!-- 要调用的工作类(quartzJob是com.kay.quartz.QuartzJob的实例化) -->
	<bean id="quartzJob" class="com.poka.app.quartz.JobQuartz"></bean>
	<bean id="doDeleteLogsJob" class="com.poka.app.quartz.DoDeleteLogsJob"></bean>
	<!-- 定义调用对象和调用对象的方法 -->


	<bean id="jobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="quartzJob" />
		<property name="targetMethod" value="work" />
	</bean>

	<bean id="jobDoDelLogsDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doDeleteLogsJob" />
		<property name="targetMethod" value="work" />
	</bean>

	<!-- 定义触发时间 -->

	<!-- CronTriggerFactoryBean:定义时间点（如：12:00）（cronExpression） SimpleTriggerFactoryBean:定义一个（循环）时间（如：5分钟）（repeatInterval） -->
	<!-- "0 0 12 * * ?" 每天中午12点触发 -->
	<!--"0 15 10 ? * *" 每天上午10:15触发 -->
	<!--"0 15 10 * * ?" 每天上午10:15触发 -->
	<bean id="simpleTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<!-- see the example of method invoking job above -->
		<property name="jobDetail" ref="jobDetail" />
		<!-- 1 seconds -->
		<property name="startDelay" value="1000" />
		<!-- repeat every 60 seconds-->
		<property name="repeatInterval" value="300000"/> 
	</bean>

	<bean id="doDelLogsTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- see the example of method invoking job above -->
		<property name="jobDetail" ref="jobDoDelLogsDetail" />
		<!-- 1 seconds -->
		<property name="startDelay" value="1000" />
		<property name="cronExpression" value="0 0 5 L * ?"></property>
	</bean>

	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="simpleTrigger" />
				<ref bean="doDelLogsTrigger" />
			</list>
		</property>
		<property name="jobFactory">
			<bean class="com.poka.app.util.PokaSpringBeanJobFactory" />
		</property>
	</bean>


	<bean id="pBPospSW" class="com.poka.app.pb.ws.impl.PBPospSW"></bean>
	<jaxws:endpoint id="pbPospService" implementor="#pBPospSW" address="/pbService">
		<jaxws:inInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
		</jaxws:inInterceptors>
		<jaxws:outInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
		</jaxws:outInterceptors>
	</jaxws:endpoint>

	<!-- 工具bean -->
	<bean id="cxfUtil" class="com.poka.app.util.CxfUtil"></bean>

</beans>